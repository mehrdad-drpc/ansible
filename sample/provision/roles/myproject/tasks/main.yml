- name: --- create directory on /home ----
  file:
    path: /home/dir1
    state: directory
    owner: root
    group: root
    mode: 0755
  tags: [create_dir]
    
- name: --- create another directory ---
  file: path=/home/dir2 state=directory owner=root group=root mode=0755
  tags: [create_dir]

- name: --- new file 3 ---
  file:
    path: /home/file1
    state: touch
    owner: root
    group: root
    mode: 0744
  tags: [create_file]

- name: --- show group variable ---
  debug:
    msg: "{{http_port}}"
  tags: [show_http_port]

- name: --- show production and stage variable value ---
  debug:
    msg: "{{myvar}}"
  tags: [show_myvar]

- name: --- command module ---
  command: ps aux 
  args:
    chdir: /home
    creates: /home/dir3
    removes: /home/dir1
  register: command_out
  tags: cmd_mod

- name: --- print command_out ---
  debug:
    msg: "{{command_out}}"
  tags: cmd_mod

- name: --- install pexpect via command playbook ---
  command: yum install -y python3-pip
  tags: [install_pexpect]

- name: --- install pexpect via pip ---
  command: pip3 install pexpect
  tags: [install_pexpect]

- name: --- expect module ---
  expect:
    command: passwd mehrdadq
    responses: 
      password: "qwe"
    # nolog: true
  tags: [expect_mod]

- name: --- script module ---
  script: script.sh   # read script from files directory
  tags: [script_mod]

- name: --- shell module ---
  shell: ps aux | grep -i ansible
  args:
    creates: /home/dir3
    removes: /home/dir1
  register: shell_var
  tags: [shell_mod] 

- name: --- print - shell_var ---
  debug:
    msg: "{{shell_var}}"
  tags: [shell_mod]

- name: --- raw module ---
  raw: echo "ansible RAW module" > /home/raw_out
  tags: [raw_mod]

- name: --- copy module ---
  copy:
    src: /home/dir1/myfile
    dest: /home/dir2
    remote_src: yes
    owner: root
    group: root
    mode: 0644
    force: yes
    backup: yes
  tags: [copy_mod]

- name: --- fetch module ---
  fetch: 
    src: /etc/nginx/nginx.conf
    dest: /tmp/ansible/
    flat: yes
    validate_checksum: yes
  tags: [fetch_mod]

- name: --- group module ---
  group:
    name: ansible
    state: present
  tags: [group_mod]

- name: --- user module ---
  user:
    name: mehrdadq
    group: ansible
    state: present
    shell: /bin/bash
    password: 123
  tags: [user_mod]

- name: --- yum-repo module ---
  yum_repository:
    name: mehrdad
    description: extra repor for RHEL
    baseurl: https://mehrdad_repo_link.com
    gpgcheck: no
    enabled: yes
    state: absent
  tags: [yum_repo_mod]

- name: --- install package via yum ---
  yum:
    name: nginx
    state: present
  tags: [yum_mod_install]

- name: --- update a package via yum ---
  yum:
    name: nginx
    state: latest
    update_only: yes
    security: yes
  tags: [yum_mod_update]

- name: --- update yum package exclude one ---
  yum:
    name: '*'
    state: latest
    exclude: kernel*
  tags: [yum_mod_update]

- name: --- get yum list ---
  yum:
    list: httpd
  register: yum_mod_out
  tags: [yum_list]

- name: --- print yum list output ---
  debug:
    msg: "{{ yum_mod_out }}"
  tags: [yum_list]

- name: --- install package via apt ---
  apt:
    name: nginx
    state: present
  tags: [apt_mod_install]

- name: --- remove package via apt ---
  apt:
    name: [nginx,nginx-common]
    state: absent
    purge: yes
  tags: [apt_mod_remove]

- name: --- use autoremove in debian ---
  apt:
    autoremove: yes
  tags: [apt_mod_remove]

- name: --- template module ---
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    # owner: root
    # group: root
    backup: yes
    # forece: yes
  tags: [tmp_mod]

- name: --- lineinfile module ---
  lineinfile: 
    path: /etc/nginx/nginx.conf
    # insertafter: ' listen       80 default_server;'
    # line: '        listen       8090 default_server;'
    insertafter: '^#listen'
    line: 'listen 8080'
    # state: absent
    backup: yes
  tags: [lineinfile_mod]

- name: --- replace module ---
  replace:
    path: /etc/nginx/nginx.conf
    regexp: 'listen       80 default_server;'
    replace: 'listen       8080 default_server;'
    # after: from line number
    # before: to line number
    backup: yes
  tags: [rep_mod]

- name: --- enable/disable systemctl service ---
  service:
    name: nginx
    enabled: yes
  tags: [srv_mod_ed]

- name: --- start/stop systemctl service ---
  service:
    name: nginx
    state: restarted
  register: sysout
  tags: [srv_mod_ss]

- name: --- archive module ---
  archive:
    path: /home/dir1/*
    dest: /tmp/test.tar.gz
    exclude_path: 
      - file1
  tags: [archive_mod]

- name: --- unarchive module ---
  unarchive:
    src: files.tar.gz
    dest: /home/test2/
    exclude:
      - f2
    # keepnewer: no
  tags: [unarc_mod]

- name: --- wate_for module --- 
  wait_for: 
    timeout: 10 #second, default value is 300
  delegate_to: localhost
  tags: [wait_for_mod]

- name: --- after wait for fiished ---
  debug: 
    msg: "wait for was finished"
  tags: [wait_for_mod]

- name: --- wait till the string '192.168.0.127' appread in access.log file ---
  wait_for: 
  # follow this path till the search_regex appears
    path: /var/log/nginx/access.log 
    search_regex: '192.168.0.127'
  tags: [wait_till_for_mod]

- name: --- after wait_for execution ---
  debug:
    msg: Nginx is running
  tags: [wait_till_for_mod]

- name: --- wait for till port is up or down ---
  wait_for:
    host: 192.168.0.159
    port: 8080
    delay: 5
    state: stopped
  tags: [wait_for_port_mod]

- name: --- ignore erroe ---
  command: /bin/false 
  ignore_errors: yes
  tags: [ignore_err]

- name: --- Update all packages in sync mode ---
  yum:
    name: "*"
    state: latest
  async: 7200
  poll: 30
  tags: [yum_async_update]

- name: --- Fire and Forget --- # run parallel tasks
  yum: 
    name: "*"
    state: latest
  async: 7200
  poll: 0 # with poll=0 ansible just triger task and does not wait for and check it again
  tags: [fireandforget]

- name: --- next task is running ---
  debug: 
    msg: "Next Task is Running"
  tags: [fireandforget]

- name: --- wait for connection module ---
  wait_for_connection: 
    timeout: 300 # maximum wait time for, in second for specific task
    delay: 10 # first delay in second
    sleep: 5 # each interval to check task in second
  tags: [wait_for_connection_mod]

- name: --- check waiting connection module ---
  debug: 
    msg: "wait for connection has been passed"
  tags: [wait_for_connection_mod]

- name: --- reboot active connection ---
  shell: "sleep 1 && reboot"
  async: 30
  poll: 0
  ignore_errors: yes
  tags: [reboot_hosts]

- name: --- after reboot 1 ---
  debug:
    msg: "Hosts have been rebooted"
  tags: [reboot_hosts]

- name: --- wait for connection module ---
  wait_for_connection: 
    timeout: 300 # maximum wait time for, in second for specific task
    delay: 10 # first delay in second
    sleep: 5 # each interval to check task in second
  tags: [reboot_hosts]

- name: --- after reboot 2 ---
  debug:
    msg: "Hosts have been rebooted"
  tags: [reboot_hosts]

- name: --- reboot module ---
  reboot:
    reboot_timeout: 30
    msg: "The system is going to reboot immediately"
  tags: [reboot_mod]

- name: --- after reboot with reboot mod ---
  debug:
    msg: "reboot mod was working gooood"
  tags: [reboot_mod]

# - name: --- Mail module sample ---
#   mail:
#     host: 192.168.0.127
#     port: 25 # SMTP defaul port
#     subject: Ansible-Mail-Module # this field is required
#     body: System {{ ansible_hostname }} has been successfully provisioned.
#     from: mehrdad.drpc@gmail.com (Mehrdad Qasemkhani)
#     to: 
#       - mehrdad.drpc@yahoo.com
#       - mehrdad.pc@gmail.com
#     attach:
#     - /etc/group
#     - /tmp/avatar2.png
#     headers:
#       - Reply-To=mehrdad.drpc@yahoo.com
#       - X-Special="Something or other"  
#     charset: utf-8
#   tags: [mail_mod, notif]

# - name: --- Send notification message via Slack all options ---
#   community.general.slack:
#     token: thetoken/generatedby/slack
#     msg: '{{ inventory_hostname }} completed'
#     channel: '#ansible'
#     thread_id: '1539917263.000100'
#     username: 'Ansible on {{ inventory_hostname }}'
#     icon_url: http://www.example.com/some-image-file.png
#     link_names: 0
#     parse: 'none'
#   delegate_to: localhost
#   tags: [slack_mod, notif]

# - name: --- Send notification message via Mattermost all options ---
#   community.general.mattermost:
#     url: https://mycompany.ir
#     api_key: my_api_key
#     text: '{{ inventory_hostname }} completed'
#     channel: notifications
#     username: 'Ansible on {{ inventory_hostname }}'
#     icon_url: https://mycompany.ir/image-file.png
#   tags: [mattermost_mod, notif]
  
# - name: --- Send notify to Telegram ---
#   community.general.telegram:
#     token: '9999999:XXXXXXXXXXXXXXXXXXXXXXX'
#     api_args:
#       chat_id: 000000
#       parse_mode: "markdown"
#       text: "Your precious application has been deployed: https://example.com"
#       disable_web_page_preview: True
#       disable_notification: True
#   tags: [telegram_mod, notif]

- name: --- Checkout subversion repository to specified folder ---
  subversion:
    repo: svn+ssh://svnHub.com/mehrdad-drpc/ansible/
    dest: /src/checkout
    username: mehrdad.drpc@gmail.com
    passwod: 1234
    revision: "5"
  tags: [svn_mod]

- name: --- install git over CentOS machine --- 
  yum: 
    name: git
    state: present
  tags: [install_git]

- name: --- Git module ---
  git:
    repo: https://username:password@github.com/mehrdad-drpc/ansible.git
    # repo: git@github.com:mehrdad-drpc/ansible.git
    dest: /opt/ansibleapp
    # key_file: /home/mehrdad/.ssh/mehrdadkey
    # accept_hostkey: yes
    # revision: v1.0
  tags: [git_mod]

- name: --- get url module ---
  get_url:
    url: https://ninerabbit.ir/wp-content/uploads/2020/07/Ansible_logo.svg.png
    dest: /tmp
    mode: 777
    timeout: 300
  tags: [geturl_mod]

  # install NTP on the client machine

- name: --- install NTP over the CentOS machine(s) ---
  yum:
    name: ntp
    state: present
  tags: [install_ntp_centos]

- name: --- install NTP over the debian base machine(s) ---
  apt:
    name: ntp
    state: present
  tags: [install_ntp_ubuntu]

- name: --- TimeZone module --- 
  timezone:  # set timezone to Tehran
    name: Asia/Tehran
  tags: [timezone_mod]

- name: --- set NTP config with Template ---
  template:
    src: ntp.conf.j2
    dest: /etc/ntp.conf
    backup: yes
  # notify:
    # - restart ntp
  tags: [timezone_mod, ntp_conf]

# for centos machines
- name: --- enable NTP service ---
  service:
    name: ntpd
    enabled: yes
    state: started
  tags: [ntp_service, centos]

- name: --- restart NTP service ---
  service:
    name: ntpd
    state: restarted
  tags: [ntp_service,centos]

# for ubuntu machines
- name: --- enable NTP service ---
  service:
    name: ntp
    enabled: yes
    state: started
  tags: [ntp_service, ubuntu]

- name: --- restart NTP service ---
  service:
    name: ntp
    state: restarted
  tags: [ntp_service, ubuntu]

- name: --- rsync module ---
  synchronize:
    mode: pull
    delete: no
    archive: yes
    compress: yes
    # rsync_path: rsync
    src: /home
    dest: /tmp/rsync_mod/{{ansible_host}}
    # rsync_opt:
      # - "--exclude=dir1"
  tags: [rsync_mod] 

- name: --- delegate_to module ---
  shell: cat /home/hostno
  register: cattii
  delegate_to: 192.168.0.159
  tags: [delegate_to_mod]

- name: --- print delegate_to output ---
  debug:
    msg: "{{cattii.stdout}}"
  tags: [delegate_to_mod]

- name: --- IPTables Module ---
  iptables:
    source: 192.168.0.159
    # table: nat
    chain: INPUT
    # in_interface: eth0
    protocol: tcp
    # match: tcp
    destination_port: 22
    jump: DROP
    # to_port: 8080
    action: insert
    state: present #absent for remove rule
    comment: Drop port 22 on remote
  tags: [iptables_mod]

- name: --- Firewalld Module ---
  firewalld:
    port: 80/tcp
    permanent: yes
    zone: public
    state: enabled
    immediate: true
  tags: [firewalld_mod]

### MariaDB
- name: --- install mariadb ---
  yum:
    name: mariadb
    state: present
  tags: [mariadb_mod_install]

- name: --- enable mariadb service ---
  service:
    name: mariadb
    enabled: yes
    state: started
  tags: [mariadb_mod_enable]

### for use mysql-db agent need to install this play
- name: --- install mysqldb agent ---
  yum:
    name: MySQL-python
    state: installed
  tags: [mariadb_mod_mysqldb]

- name: --- create database on remote host ---
  mysql_db:
    name: mehrdad_db
    state: present
  tags: [create_db]

- name: --- dump from db via mysql_db ---
  mysql_db:
    name: mehrdad_db
    state: dump
    target: /tmp/mysql_dump.sql
  tags: [dump_db]

- name: --- restore database ---
  mysql_db:
    name: mehrdad_db
    state: import
    target: /tmp/mysql_dump.sql
  tags: [restore_db]

- name: --- create mysql user ---
  mysql_user:
    name: mehrdad
    password: mehrdad
    priv: mehrdad_db.*:ALL
    state: present
  tags: [mysql_user]

- name: --- find module ---
  find:
    paths: 
      - /home
      - /tmp 
    age: -1w
    size: -10m
    file_type: file # file, directory, link, Any...
    pattern: 
      - '*.txt'
      - '*.conf'
  tags: [find_mod]

- name: --- local action ---
  local_action:
    module: find
    path: /home/mehrdad/tmp
    file_type: file
    patterns: 
      - '*.txt'
      - '*.conf'
  tags: [local_action_mod]

# - name: --- set_fact module redhat ---
#   set_fact: 
#     package_name: httpd
#   when: 
#     ansible_os_family: "RedHat"
#   tags: [set_fact_mod]

- name: --- set_fact module debian ---
  set_fact: 
    package_name: apache2
  when: 
    ansible_os_family: "Debian"
  tags: [set_fact_mod]


